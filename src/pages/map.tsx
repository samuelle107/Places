import Head from 'next/head';
import Map, { Source, Layer } from 'react-map-gl';
import React, { type FC } from 'react';

import clsx from 'clsx';
import PanelSwitcher from '@/components/panels/switcher';
import CollapsePanelButton from '@/components/collapse-button';
import Header from '@/components/header';
import PlaceDetails from '@/components/place-details';
import { usePlaces } from '@/context/place-context';
import { PlaceActionTypes } from '@/reducer/placeReducer';
import {
  contextPlaceLayer,
  optimalPathLayer,
  optimalPathLayerStroke,
  pinnedPlacesLayer,
  placesLayer,
} from '@/mapbox/layers';

const ExplorePage: FC = () => {
  const {
    state: {
      results: { activePlace },
      panel: { isExpanded },
    },
    dispatch,
  } = usePlaces();

  return (
    <>
      <Head>
        <title>Explore</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <div
          className={clsx(
            isExpanded && 'attribution',
            'w-screen h-screen max-h-screen max-w-[100wh] flex flex-col'
          )}
        >
          <Header />

          <div className="relative  flex-grow">
            <Map
              id="explore-map"
              mapboxAccessToken={process.env.NEXT_PUBLIC_MAPBOX_API_TOKEN}
              initialViewState={{
                longitude: -100,
                latitude: 40,
                zoom: 3.5,
              }}
              mapStyle="mapbox://styles/mapbox/streets-v9"
              // mapStyle={'mapbox://styles/samuelle107/clf55d6h6000b01p692qw937v'}
            >
              {/* Mapbox sources */}
              <>
                <Source id={optimalPathLayer.id} type="geojson">
                  <Layer {...optimalPathLayerStroke} />
                  <Layer {...optimalPathLayer} />
                </Source>

                <Source id={placesLayer.id} type="geojson">
                  <Layer {...placesLayer} />
                </Source>

                <Source id={pinnedPlacesLayer.id} type="geojson">
                  <Layer {...pinnedPlacesLayer} />
                </Source>

                <Source id={contextPlaceLayer.id} type="geojson">
                  <Layer {...contextPlaceLayer} />
                </Source>
              </>
            </Map>

            <PanelSwitcher isOpen={isExpanded} />

            <CollapsePanelButton
              isOpen={isExpanded}
              onTogglePanel={() => {
                dispatch({
                  type: PlaceActionTypes.TOGGLE_PANEL,
                });
              }}
            />

            {activePlace !== null && (
              <PlaceDetails
                isSidePanelExpanded={isExpanded}
                place={activePlace}
                onDetailsClose={() => {
                  dispatch({
                    type: PlaceActionTypes.CLOSE_PLACE_DETAILS,
                  });
                }}
              />
            )}
          </div>
        </div>
      </main>
    </>
  );
};

export default ExplorePage;
